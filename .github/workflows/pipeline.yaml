name: Update Kubernetes Configurations

on:
  workflow_dispatch:
    inputs:
      service:
        description: "Nome do serviço a ser atualizado (exemplo: ocelot, user-query)"
        required: true

  repository_dispatch:
    types: [update-configurations]

jobs:
  update-service:
    name: Update Service Configurations
    runs-on: self-hosted

    steps:
      # Faz o checkout do código
      - name: Checkout configurations
        uses: actions/checkout@v2
      
      # Configura o acesso ao Kubernetes
      - name: Set up Kubernetes configuration
        run: |
          mkdir -p ~/.kube
          echo "${{ secrets.KUBECONFIG }}" > ~/.kube/config

      # Listar arquivos para depuração
      - name: List files for debugging
        run: |
          ls -R

      # Função para atualizar o serviço
      - name: Update service
        run: |
          update_service() {
            local service_name=$1
            local service_dir="./services/$service_name-service"
            
            if [ ! -d "$service_dir" ]; then
              echo "Error: Directory $service_dir does not exist."
              exit 1
            fi

            local deployment_file="$service_dir/deployment.yaml"
            if [ -f "$deployment_file" ]; then
              IMAGE_DIGEST=$(curl -s "https://hub.docker.com/v2/repositories/natanroberto182/$service_name/tags/latest" | jq -r '.images[0].digest')
              if [ -z "$IMAGE_DIGEST" ]; then
                echo "Error: Failed to retrieve image digest for $service_name"
                exit 1
              fi
              sed -i "s|image:.*|image: natanroberto182/$service_name@$IMAGE_DIGEST|" $deployment_file
              kubectl apply -f $deployment_file
            fi

            for resource_file in "$service_dir"/*.yaml; do
              if [ -f "$resource_file" ]; then
                kubectl apply -f $resource_file
              fi
            done
          }

          # Verifica o serviço a ser atualizado
          if [ "${{ github.event.client_payload.services }}" == "ocelot" ]; then
            echo "Deploying service: ocelot"
            update_service "ocelot"
          elif [ "${{ github.event.client_payload.services }}" == "user-query" ]; then
            echo "Deploying service: user-query"
            update_service "user-query"
          else
            echo "Error: Service ${github.event.client_payload.services} is not recognized."
            exit 1
          fi
